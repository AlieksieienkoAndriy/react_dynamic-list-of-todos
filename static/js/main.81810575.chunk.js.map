{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","filter","handleChange","event","target","name","value","setState","this","props","todos","getUserId","changeComplate","filteredTodos","todo","includes","completed","className","type","placeholder","onChange","map","key","id","classNames","checked","readOnly","onClick","userId","React","Component","getUsers","fetch","then","response","json","CurrentUser","user","setUser","userFromServer","data","prevProps","clearUser","email","phone","App","selectedUserId","todoId","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"iYAKaA,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,OAAQ,OAHZ,EAMEC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAEd,EAAKC,SAAL,eACGF,EAAOC,KAVd,uDAcY,IAAD,EACsCE,KAAKC,MAA1CC,EADD,EACCA,MAAOC,EADR,EACQA,UAAWC,EADnB,EACmBA,eADnB,EAEmBJ,KAAKT,MAAvBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,OAEXY,EAAgB,GAiBpB,OAdEA,EADY,KAAVb,EACW,YAAOU,GAEJA,EAAMT,QAAO,SAAAa,GAAI,OAAoB,OAAfA,EAAKd,SACxCC,QAAO,SAAAa,GAAI,OAAKA,EAAKd,MAAMe,SAASf,MAG1B,WAAXC,IACFY,EAAgBA,EAAcZ,QAAO,SAAAa,GAAI,OAAMA,EAAKE,cAGvC,cAAXf,IACFY,EAAgBA,EAAcZ,QAAO,SAAAa,GAAI,OAAKA,EAAKE,cAInD,yBAAKC,UAAU,YACb,sCACA,+BACG,IADH,UAGE,2BACEZ,KAAK,QACLa,KAAK,OACLC,YAAY,cACZb,MAAON,EACPoB,SAAUZ,KAAKN,gBAInB,+BACE,4BACEG,KAAK,SACLC,MAAOL,EACPmB,SAAUZ,KAAKN,cAEf,4BAAQI,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,eAIJ,yBAAKW,UAAU,4BACb,wBAAIA,UAAU,kBACXJ,EAAcQ,KAAI,SAAAP,GAAI,OACrB,wBACEQ,IAAKR,EAAKS,GACVN,UAAWO,IAAW,iBAAkB,CACtC,0BAA2BV,EAAKE,UAChC,6BAA8BF,EAAKE,aAGrC,+BACE,2BACEE,KAAK,WACLb,KAAK,OACLoB,QAASX,EAAKE,UACdU,UAAQ,EACRN,SAAU,WACRR,EAAeE,EAAKS,OAGxB,2BAAIT,EAAKd,QAGX,4BACEiB,UAAWO,IACT,wBAAyB,SACzB,CAAE,mCAAoCV,EAAKE,YAE7CE,KAAK,SACLS,QAAS,WACPhB,EAAUG,EAAKc,UAPnB,WAWGd,EAAKc,mBAhGxB,GAA8BC,IAAMC,YCI7B,SAASC,EAASH,GACvB,OAAOI,MAAM,GAAD,OARC,yCAQD,OAAgBJ,IACzBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,UCNlBC,EAAb,4MACErC,MAAQ,CACNsC,KAAM,IAFV,EAeEC,QAAU,WACRP,EAAS,EAAKtB,MAAMmB,QACjBK,MAAK,SAACM,GACL,EAAKhC,SAAS,CACZ8B,KAAME,EAAeC,WAnB/B,kEAMIhC,KAAK8B,YANT,yCASqBG,GACbA,EAAUb,SAAWpB,KAAKC,MAAMmB,QAClCpB,KAAK8B,YAXX,+BAwBY,IACAD,EAAS7B,KAAKT,MAAdsC,KACAK,EAAclC,KAAKC,MAAnBiC,UAER,OAAa,OAATL,EAEA,yBAAKpB,UAAU,eACb,wBAAIA,UAAU,sBACZ,sEASN,yBAAKA,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEGoB,EAAKd,KAIV,wBAAIN,UAAU,qBAAqBoB,EAAKhC,MACxC,uBAAGY,UAAU,sBAAsBoB,EAAKM,OACxC,uBAAG1B,UAAU,sBAAsBoB,EAAKO,OACxC,4BACE3B,UAAU,qBACVC,KAAK,SACLS,QAASe,GAHX,cApDR,GAAiCb,IAAMC,WCyExBe,E,4MAtEb9C,MAAQ,CACNW,MAAO,GACPoC,eAAgB,G,EAYlBnC,UAAY,SAAC0B,GACX,EAAK9B,SAAS,CACZuC,eAAgBT,K,EAIpBK,UAAY,WACV,EAAKnC,SAAS,CACZuC,eAAgB,K,EAIpBlC,eAAiB,SAACmC,GAChB,EAAKxC,UAAS,SAAAR,GAAK,MAAK,CACtBW,MAAOX,EAAMW,MAAMW,KAAI,SAACP,GACtB,OAAIA,EAAKS,KAAOwB,EACPjC,EAGF,2BACFA,GADL,IAEEE,WAAYF,EAAKE,oB,kEA9BJ,IAAD,OFRbgB,MAJM,wCAKVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UESxBF,MAAK,SAACe,GACL,EAAKzC,SAAS,CACZG,MAAO,YAAIsC,EAAgBR,MAAMnB,KAAI,SAAAP,GAAI,sBAAUA,a,+BAgCjD,IAAD,EAC2BN,KAAKT,MAA/BW,EADD,EACCA,MAAOoC,EADR,EACQA,eAEf,OACE,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEP,MAAOA,EACPC,UAAWH,KAAKG,UAChBC,eAAgBJ,KAAKI,kBAKzB,yBAAKK,UAAU,gBACb,yBAAKA,UAAU,0BACZ6B,EACC,kBAAC,EAAD,CACElB,OAAQkB,EACRJ,UAAWlC,KAAKkC,YAEhB,0B,GA/DEb,IAAMC,WCHxBmB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.81810575.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    filter: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, getUserId, changeComplate } = this.props;\n    const { title, filter } = this.state;\n\n    let filteredTodos = [];\n\n    if (title === '') {\n      filteredTodos = [...todos];\n    } else {\n      filteredTodos = todos.filter(todo => (todo.title !== null))\n        .filter(todo => (todo.title.includes(title)));\n    }\n\n    if (filter === 'active') {\n      filteredTodos = filteredTodos.filter(todo => (!todo.completed));\n    }\n\n    if (filter === 'completed') {\n      filteredTodos = filteredTodos.filter(todo => (todo.completed));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label>\n          {' '}\n          Filter:\n          <input\n            name=\"title\"\n            type=\"text\"\n            placeholder=\"tape a todo\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label>\n          <select\n            name=\"filter\"\n            value={filter}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </label>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"todo\"\n                    checked={todo.completed}\n                    readOnly\n                    onChange={() => {\n                      changeComplate(todo.id);\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected': !todo.completed },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    getUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n\n  getUserId: PropTypes.func.isRequired,\n  changeComplate: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line\nconst TODOS_URL = `https://mate-api.herokuapp.com/todos`;\nconst USERS_URL = `https://mate-api.herokuapp.com/users/`;\n\nexport function getTodos() {\n  return fetch(TODOS_URL)\n    .then(response => response.json());\n}\n\nexport function getUsers(userId) {\n  return fetch(`${USERS_URL}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.setUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.setUser();\n    }\n  }\n\n  setUser = () => {\n    getUsers(this.props.userId)\n      .then((userFromServer) => {\n        this.setState({\n          user: userFromServer.data,\n        });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    if (user === null) {\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user: no user information\n            </span>\n          </h2>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todosFromServer) => {\n        this.setState({\n          todos: [...todosFromServer.data].map(todo => ({ ...todo })),\n        });\n      });\n  }\n\n  getUserId = (user) => {\n    this.setState({\n      selectedUserId: user,\n    });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  changeComplate = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            getUserId={this.getUserId}\n            changeComplate={this.changeComplate}\n\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}